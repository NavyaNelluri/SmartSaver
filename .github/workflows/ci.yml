name: CI/CD Pipeline

on:
  push:
    branches:
      - krishna_sprint2
  pull_request:
    branches:
      - krishna_sprint2

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Step 3: Install Python dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask
          pip install flask_mail
          pip install snowflake-connector-python
          pip install python-dotenv
          pip install pytest

      # Step 4: Run Unit Tests
      - name: Run Unit Tests
        run: |
          pytest test_app.py  # Adjust if your tests are in a different file or directory
        continue-on-error: false

      # Step 5: Build Project
      - name: Build Project
        run: |
          mkdir -p build  # Create build directory if it doesn't exist
          # Add commands to build your project and generate necessary files
          cp -r templates/* build/  # Copy any necessary template files
          cp -r static/* build/  # Copy any necessary static files
          echo "Build completed successfully"
        if: success()

      # Step 6: List build directory contents (for debugging)
      - name: List build directory contents
        run: ls -la build/
        if: success()

      # Step 7: Verify build artifacts
      - name: Verify build artifacts
        if: success()
        run: |
          if [ ! -d "./build" ] || [ -z "$(ls -A ./build)" ]; then
            echo "Build artifacts not found!"
            exit 1
          fi

      # Step 8: Archive build artifacts
      - name: Archive Artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build/

  fail-check:
    runs-on: ubuntu-latest
    needs: build
    if: failure()  # This job runs only if the previous job fails
    steps:
      - name: Check if build failed
        run: echo "Checking build failure..."
      
      - name: Notify Failure
        run: echo "Build or test failed. Please check the logs and fix issues."
      
  # Optional: Deployment step (adjust based on your deployment process)
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/krishna_sprint2' && success()
    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying to production..."
          # Add your deployment script or commands here
